module.exports = {

  // Cache from db
  // key: record id - generated by db
  // value: record
  users: {},

  USERROLES: {EMPLOYEE: 0, RECEPTIONIST: 5, ADMIN: 10},

  loadUsers: async function() {
    sails.log("Loading users...");
    let userList = await User.find({
      where: {
        username: { '!' : ['sadmin', 'stp'] } // not in
      }
    });
    sails.log("Total Users: " + userList.length);
    for (let i = 0; i < userList.length; i++) {
      delete userList[i].password;
      let id = userList[i].id;
      UserUtils.users[id] = userList[i];
    }
    sails.log("Loaded users", Object.keys(UserUtils.users));
    // console.log("Loaded users", UserUtils.users);
  },

  findUser: function(username) {
    let userList = Object.values(UserUtils.users)
    for (let i = 0; i < userList.length; i++) {
      if (userList[i].username === username) {
        return userList[i].id;
      }
    }
    return -1;
  },

  updateUser: function(userid, userinfo) {
    if (!UserUtils.users.hasOwnProperty(userid)) {
      sails.log("Add new user to list " + userid);
    } else {
      sails.log("Update user to list " + userid);
    }
    delete userinfo.password;
    UserUtils.users[userid] = userinfo;

    // sails.log("Updated users", UserUtils.users);
    // console.log("Updated users", UserUtils.users);
  },

  deleteUser: function(userid) {
    if (!UserUtils.users.hasOwnProperty(userid)) {
      sails.log("User " + userid + " is not available, skip it");
    } else {
      sails.log("Delete user " + userid);
      delete UserUtils.users[userid];
      // sails.log("Updated users", UserUtils.users);
      // console.log("Updated users", UserUtils.users);
    }
  },

  validateUser: function(options) {
    // options: {username: User.username}
    usernameList = options.username.split(',');
    userIdList = [];
    // sails.log("userIdList", userIdList);
    // sails.log("usernameList", usernameList);
    for (let i = 0; i < usernameList.length; i++) {
      // sails.log(i + " " + usernameList[i]);
      for (let userId in UserUtils.users) {
        if (UserUtils.users[userId].username === usernameList[i]) {
          // sails.log("Pushed " + userId + " to list");
          userIdList.push(userId);
          break;
          // return userId;
        }
      }
    }
    // sails.log("returnning " + userIdList);
    return userIdList;
  },

  // options.userId : user id who is ONLINE
  // options.time:    at time that user is ONLINE
  onUserOnline: function(options) {
    let nowDatetime = options.time;
    UserUtils.users[options.userId].isOnline = true;
    sails.log(UserUtils.users[options.userId].username + " is ONLINE");
    User.update({ id: options.userId }, { lastReqTime: nowDatetime, isOnline: true }).exec(function(err, updatedTimestamp) {
      if (err) {
        sails.log.error("Could not update last request timestamp for userid " + options.userId + ". Err: " + err);
        return;
      }
      if (updatedTimestamp) {
        // do nothing here
        sails.log("Successfully update last request timestamp for userid " + options.userId);
      } else {
        sails.log.error("Could not update last request timestamp for userid " + options.userId);
      }
    });

    // ------------------------------
    // Check and create new timesheet
    // ------------------------------
    // let today = new Date();
    let sod = TimesheetUtils.pickTimesheetDatesod({userId: options.userId, daytime: nowDatetime});
    TimesheetUtils.createNewTimesheet({userId: options.userId, datesod: sod});
  },

  // options.userId : user id who is OFFLINE
  // options.time:    at time that user is OFFLINE
  onUserOffline: function(options) {
    let userId = options.userId;
    let offlineThresh = options.time;
    UserUtils.users[userId].isOnline = false;
    sails.log(UserUtils.users[userId].username + " is OFFLINE");
    User.update({ id: userId }, { isOnline: false }).exec(function(err, users) {
      if (err) {
        sails.log.error("Could not update users's current status. Err: " + err);
        return;
      }
    });

    // ------------------------------
    // Update outTime of timesheet
    // ------------------------------
    // let sod = Date.UTC(offlineThresh.getFullYear(), offlineThresh.getMonth(), offlineThresh.getDate()); // TODO: this is called frequently, should have a global timer?
    let sod = TimesheetUtils.pickTimesheetDatesod({userId: userId, daytime: offlineThresh});
    TimesheetUtils.updateOutTimesheet({userId: userId, datesod: sod, outTime: offlineThresh.getTime()});
  },

  updateLastReqTimestamp: function(options) {
    // precondition: when this function is called, we assumed that the user was already valid
    // options: {userid: id}
    if (!UserUtils.users.hasOwnProperty(options.userId)) {
      sails.log.error("Invalid userId. Could not update last request timestamp for userId " + options.userId);
    } else {
      let nowDatetime = new Date(); // new Date() will be called multiple times for all users (or all requests). Should create a global timer and use it?
      UserUtils.users[options.userId].lastReqTime = nowDatetime;
      if (UserUtils.users[options.userId].isOnline === false) {
        UserUtils.onUserOnline({userId: options.userId, time: nowDatetime});
      }
    }
  },

  checkUserCurrentStatus: function(options) {
    // options: {offlineThresh: datetime}
    for (let userId in UserUtils.users) {
      // sails.log("checking " + UserUtils.users[userId].username +
      //           " lastReqTime " + UserUtils.users[userId].lastReqTime +
      //           " offlineThresh " + options.offlineThresh +
      //           " isOnline " + UserUtils.users[userId].isOnline);
      if (UserUtils.users[userId].lastReqTime < options.offlineThresh &&
          UserUtils.users[userId].isOnline === true) {
            UserUtils.onUserOffline({userId: userId, time: options.offlineThresh});
          }
    }
  },

  getAuthenticatedUserInfo: async function(options) {
    // options: {userid: id}
    // sails.log("Getting authenticated userinfo with options ", options);
    // TODO: use in-memory users table instead of this
    return await User.findOne({id: options.userId});
  },

  // owner will be the one who is in assignees list and is currently online
  getOwner: function(options) {
    sails.log("Getting Owner with options " + JSON.stringify(options));
    if (options.assignees.length > 0) {
      let found = false;
      let i;
      for (i = 0; i < options.assignees.length; i++) {
        // TODO: algorithm for round-robin of online assignees will be applied later
        let userId = options.assignees[i].id;
        if (UserUtils.users[userId].isOnline === true) {
          sails.log("found user " + options.assignees[i].username + " is online");
          found = true;
          break;
        }
      }
      if (found === true) {
        sails.log("Set new request's owner which found to " + options.assignees[i].id);
        return options.assignees[i].id;
      } else {
        return options.default; // assign to requesting user if no one found
      }
    } else {
      return options.default; // assign to requesting user if no one found
    }
  },

  getOnlineUsers: function() {
    let arrUsers = Object.values(UserUtils.users);
    // console.log("arrUsers", arrUsers);
    let arrActiveUsers = [];
    for (let i = 0; i < arrUsers.length; i++) {
      // console.log("isOnline", arrUsers[i].isOnline);
      if (arrUsers[i].isOnline === true) {
        arrActiveUsers.push({
          "id":       arrUsers[i].id,
          "username": arrUsers[i].username,
          "name":     arrUsers[i].name,
          "status":   arrUsers[i].status,
          "isOnline": arrUsers[i].isOnline
        });
        // console.log("Added", arrActiveUsers);
      }
    }
    return arrActiveUsers;
  },

  getPossibleProxies: function(options) {
    sails.log("Geting proxies with options " + JSON.stringify(options));
    sails.log("Geting proxies with pickedOwner " + options.owner);
    // let activeUsers = await User.find({ isOnline: true });
    let activeUsers = UserUtils.getOnlineUsers();
    
    if (!activeUsers) {
      sails.log("activeUser is null, amazing");
      return {
        total: 1,
        possibleProxies: options.default
      };
    }
    
    let found = false;
    for (let i = 0; i < activeUsers.length; i++) {
      sails.log("Geting proxies with activeUsers " + activeUsers[i].id);
      if (options.owner === activeUsers[i].id) {
        found = true;
        break;
      }
    }
    if (found === false) {
      sails.log("pushing owner to active user list " + options.owner.id);
      activeUsers.push(options.owner);
    } else {
      // sails.log("found owner in the active list, no need to add");
    }
    
    if (activeUsers.length === 0) {
      sails.log("no one in active users, amazing " + options.default);
      return {
        total: 1,
        possibleProxies: options.default
      };
    }

    return {
      total: activeUsers.length,
      possibleProxies: activeUsers
    };
  }

};